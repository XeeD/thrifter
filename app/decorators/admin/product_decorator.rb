class Admin::ProductDecorator < Draper::Base
  decorates :product

  def assigned_param_values
    param_values = Product.joins(:defined_param_values).select("parametrizations.param_item_id, param_values.value")

    param_values.inject({}) do |hash, h|
      if hash.has_key?(h.param_item_id)
        unless hash[h.param_item_id].kind_of?(Array)
          hash[h.param_item_id] = [hash[h.param_item_id]]
        end
        hash[h.param_item_id] << h.value
      else
        hash[h.param_item_id] = h.value
      end

      hash
    end
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
